
##### Configuration #####

# trim trailing slashes from paths to avoid snakemake complaining of double '/' in paths
config["output_path"] = config["output_path"].rstrip("/")
config["input_path"] = config["input_path"].rstrip("/")

barcodes = config["barcodes"].split(',')
barcode_string = ""
for i in barcodes:
    barcode_string+=" {}".format(i.lstrip("NB").lstrip("BC").lstrip("barcode"))

limit_barcodes_to = ""
print(config["limit_barcodes"])
if config["limit_barcodes"]=="True":
    limit_barcodes_to = " --limit_barcodes_to {}".format(barcode_string)

barcode_set = ''
if str(config["barcode_set"]).lower()=="rapid":
    barcode_set= " --rapid_barcodes"
elif str(config["barcode_set"]).lower()=="all":
    barcode_set=""
else:
    barcode_set= " --native_barcodes"

discard_unassigned = ""
if str(config["discard_unassigned"]).lower()=="true":
    discard_unassigned= " --discard_unassigned"
else:
    discard_unassigned= ""

require_two_barcodes = ""
if str(config["require_two_barcodes"]).lower()=="false":
    require_two_barcodes= ""
else:
    require_two_barcodes= " --require_two_barcodes"

split_reads = ""
if str(config["split_reads"]).lower()=="true":
    split_reads= " --no_split"
else:
    split_reads= " --no_split"

discard_middle = ""
if str(config["discard_middle"]).lower()=="true":
    discard_middle= " --discard_middle"
else:
    discard_middle= ""

##### Target rules #####

rule all:
    input:
        expand(config["output_path"]+ "/{filename_stem}.csv", filename_stem=config["filename_stem"])

##### Modules #####
include: "rules/demultiplex.smk"
include: "rules/map.smk"

